!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BRANCH_NAME	scripts/sync_leetcode_submissions.py	/^BRANCH_NAME = os.getenv("BRANCH_NAME", "main")  # Default to 'main' if not set$/;"	v
Github	scripts/sync_leetcode_submissions.py	/^from github import Github$/;"	i
LEETCODE_REPO	scripts/sync_leetcode_submissions.py	/^LEETCODE_REPO = os.getenv("LEETCODE_REPO")$/;"	v
LEETCODE_TOKEN	scripts/sync_leetcode_submissions.py	/^LEETCODE_TOKEN = os.getenv("LEETCODE_TOKEN")$/;"	v
LEETCODE_USERNAME	scripts/sync_leetcode_submissions.py	/^LEETCODE_USERNAME = os.getenv("LEETCODE_USERNAME")$/;"	v
LinkedList	scripts/singlylinkedlist.py	/^class LinkedList:$/;"	c
List	mincostclimbingstairs.py	/^from typing import List$/;"	i
Node	scripts/singlylinkedlist.py	/^class Node:$/;"	c
Solution	169-majority-element/majority-element.py	/^class Solution:$/;"	c
Solution	2350-find-closest-number-to-zero/find-closest-number-to-zero.py	/^class Solution(object):$/;"	c
Solution	climbingstairs.py	/^class Solution:$/;"	c
Solution	isPalindrome.py	/^class Solution:$/;"	c
Solution	mincostclimbingstairs.py	/^class Solution:$/;"	c
__init__	scripts/singlylinkedlist.py	/^    def __init__(self):$/;"	m	class:LinkedList
__init__	scripts/singlylinkedlist.py	/^    def __init__(self, item):$/;"	m	class:Node
add_employees_to_dashboard	serialization.py	/^def add_employees_to_dashboard(salaries_json, name, salary):$/;"	f
branch	scripts/sync_leetcode_submissions.py	/^branch = 'dev'$/;"	v
climbStairs	climbingstairs.py	/^    def climbStairs(self, n: int) -> int:$/;"	m	class:Solution
datetime	scripts/sync_leetcode_submissions.py	/^import datetime$/;"	i
decoded_salaries	serialization.py	/^decoded_salaries = json.loads(new_salaries)$/;"	v
echo	sendvaluestogen.py	/^def echo():$/;"	f
fetch_submissions	scripts/sync_leetcode_submissions.py	/^def fetch_submissions():$/;"	f
fib	generatorfib.py	/^def fib():$/;"	f
fibo	generatorfib.py	/^fibo = fib()$/;"	v
findClosestNumber	2350-find-closest-number-to-zero/find-closest-number-to-zero.py	/^    def findClosestNumber(self, nums):$/;"	m	class:Solution
g	scripts/sync_leetcode_submissions.py	/^g = Github(LEETCODE_TOKEN)$/;"	v
gen	closemethodgen.py	/^gen = generator()$/;"	v
gen	sendvaluestogen.py	/^gen = echo()$/;"	v
generator	closemethodgen.py	/^def generator():$/;"	f
isPalindrome	isPalindrome.py	/^    def isPalindrome(self, x:int) -> bool:$/;"	m	class:Solution
json	serialization.py	/^import json$/;"	i
leetcode_url	scripts/sync_leetcode_submissions.py	/^leetcode_url = f"https:\/\/leetcode.com\/api\/submissions\/{LEETCODE_USERNAME}\/"$/;"	v
linkedlist	scripts/singlylinkedlist.py	/^    linkedlist = LinkedList()$/;"	v
main	isPalindrome.py	/^    def main(self):$/;"	m	class:Solution
main	scripts/sync_leetcode_submissions.py	/^def main():$/;"	f
maingenerator	yeildfrom.py	/^def maingenerator():$/;"	f
majorityElement	169-majority-element/majority-element.py	/^    def majorityElement(self, alist):$/;"	m	class:Solution
minimumCostToClimbStairs	mincostclimbingstairs.py	/^    def minimumCostToClimbStairs(self, cost: List[int]) -> int:$/;"	m	class:Solution
new_salaries	serialization.py	/^new_salaries = add_employees_to_dashboard(salaries, "Robus", 399)$/;"	v
os	scripts/sync_leetcode_submissions.py	/^import os$/;"	i
prime	generatorprime.py	/^def prime(alist):$/;"	f
primo	generatorprime.py	/^primo = prime([2, 4, 3, 21, 3, 42, 32])$/;"	v
push_to_github	scripts/sync_leetcode_submissions.py	/^def push_to_github(submission):$/;"	f
repo	scripts/sync_leetcode_submissions.py	/^repo = g.get_user().get_repo(LEETCODE_REPO)$/;"	v
requests	scripts/sync_leetcode_submissions.py	/^import requests$/;"	i
result	169-majority-element/majority-element.py	/^result = solution.majorityElement([2,3,4,3,3,3,3,1])$/;"	v
result	climbingstairs.py	/^result = solution.climbStairs(10)$/;"	v
result	mincostclimbingstairs.py	/^result = solution.minimumCostToClimbStairs([1, 100, 1, 1, 1, 100, 1, 1, 100, 1])$/;"	v
salaries	serialization.py	/^salaries = '{"Nina": 300, "Niyanta": 300}'$/;"	v
second	scripts/singlylinkedlist.py	/^    second = Node(2)$/;"	v
solution	169-majority-element/majority-element.py	/^solution  = Solution()$/;"	v
solution	climbingstairs.py	/^solution = Solution()$/;"	v
solution	isPalindrome.py	/^solution = Solution()$/;"	v
solution	mincostclimbingstairs.py	/^solution = Solution()$/;"	v
squares	generatorexp.py	/^squares = (x*x for x in range(10))$/;"	v
subgenerator	yeildfrom.py	/^def subgenerator():$/;"	f
third	scripts/singlylinkedlist.py	/^    third = Node(3)$/;"	v
